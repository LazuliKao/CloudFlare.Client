trigger:
  branches:
    include:
    - master
  tags:
    include:
    - '*'  
pr:
  branches:
    include:
    - '*'  

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  vmImageName: 'windows-latest'

stages:
- stage: buildStage
  displayName: 'üèóÔ∏è Build & üß™ Test'
  jobs: 
    - job: buildAndTest
      displayName: 'Build and Test'
      pool:
        vmImage: $(vmImageName)
      steps:      
      - task: UseDotNet@2
        displayName: 'Use .Net 6 SDK'
        inputs:
          packageType: 'sdk'
          version: '6.0.x'
          performMultiLevelLookup: true
      - task: DotNetCoreCLI@2
        displayName: 'Restore'
        inputs:
          command: 'restore'
          arguments: '--verbosity normal'
          projects: '**/*.csproj'
          feedsToUse: 'select'
          vstsFeed: 'd5f72524-9a3d-4cca-ac65-8688b67830d4/f7ea4fd7-43dc-4f24-a491-8f013b20ab55'
      - task: DotNetCoreCLI@2
        displayName: 'Build'
        inputs:
          command: build
          projects: '**/*.csproj'
          arguments: '--configuration $(buildConfiguration)'
      - task: DotNetCoreCLI@2
        displayName: 'Test'
        env:
          ApiKey: $(ApiKey)
          EmailAddress: $(EmailAddress)
        inputs:
          command: test
          projects: '**/*Test.csproj'
          arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat="cobertura%2copencover" /p:CoverletOutput=$(Build.SourcesDirectory)\TestResults\Coverage\'
          publishTestResults: true
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Code Coverage Report'
        inputs:
          codeCoverageTool: 'cobertura'
          failIfCoverageEmpty: true
          summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.**.cobertura.xml'
      - task: PublishBuildArtifacts@1
        #condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
        displayName: 'Publish Build Artifacts'
        inputs:
          pathtoPublish: '$(System.DefaultWorkingDirectory)'
          artifactName: CloudFlareClientArtifact

- stage: qualityStage
  displayName: 'üîç Quality Gate'
  dependsOn: []
  jobs: 
  - job: qualityCheck
    displayName: 'SonarCloud'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net 6 SDK'
      inputs:
        packageType: 'sdk'
        version: '6.0.x'
        performMultiLevelLookup: true
    - task: SonarCloudPrepare@1
      displayName: Prepare SonarCloud
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'zingz0r-github'
        scannerMode: 'MSBuild'
        projectKey: 'zingz0r_CloudFlare.Client'
        projectName: 'CloudFlare.Client'
        projectVersion: '$(Build.BuildNumber)'
        extraProperties: |
          sonar.exclusions=**/obj/**,**/*.dll
          sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.**.opencover.xml
          sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
    - task: DotNetCoreCLI@2
      displayName: 'Build'
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'
    - task: SonarCloudAnalyze@1
      displayName: "Analyze Code with SonarCloud"
    - task: SonarCloudPublish@1
      displayName: "Publish Code Analysis Results"

- stage: deploy
  displayName: 'üöö Deploy'
  dependsOn:
    - buildStage
    - qualityStage
  #condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  jobs:
  - job: deployNugetOrg
    displayName: 'Deploy to NuGet'
    pool:
      vmImage: $(vmImageName)
    steps:
    - checkout: none
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: CloudFlareClientArtifact
        downloadPath: $(System.DefaultWorkingDirectory) 
    - task: DotNetCoreCLI@2
      displayName: 'Pack Release'
      inputs:
        command: pack
        packagesToPack: 'CloudFlareClientArtifact/CloudFlare.Client/CloudFlare.Client.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
        arguments: '--no-build --configuration $(buildConfiguration)'
        versioningScheme: 'byEnvVar'
        versionEnvVar: Build.SourceBranchName
        verbosityPack: Diagnostic
    - task: CopyFiles@2
      displayName: 'Copy Files'
      inputs:
        SourceFolder: 'CloudFlareClientArtifact/CloudFlare.Client/bin'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      displayName: Publish To Artifactory
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'release'
        publishLocation: 'Container'
    # - task: NuGetCommand@2
    #   displayName: 'Upload Release to NuGet Gallery'
    #   inputs:
    #     command: 'push'
    #     packagesToPush: '$(Build.ArtifactStagingDirectory)/packages/*.nupkg'
    #     nuGetFeedType: 'external'
    #     publishFeedCredentials: 'nuget.org'
    #     verbosityPush: Detailed