trigger:
  branches:
    include:
      - master
  tags:
    include:
      - "*"
pr:
  branches:
    include:
      - "*"

variables:
  solution: "**/*.sln"
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"
  vmImageName: "windows-latest"

stages:
  - stage: pipeline
    displayName: CloudFlare.Client
    jobs:
      - job: pipeline
        displayName: CI/CD Pipeline
        pool:
          vmImage: $(vmImageName)

        steps:
          - task: SonarCloudPrepare@1
            displayName: "Prepare analysis on SonarCloud"
            condition: ne(variables['Build.Reason'], 'PullRequest')
            inputs:
              SonarCloud: "SonarCloud"
              organization: "zingz0r-github"
              scannerMode: "MSBuild"
              projectKey: "zingz0r_CloudFlare.Client"
              projectName: "CloudFlare.Client"
              projectVersion: "$(Build.BuildNumber)"
              extraProperties: |
                sonar.exclusions=**/obj/**,**/*.dll
                sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/TestResults.trx
                sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/**/coverage.opencover.xml

          - task: SonarCloudPrepare@1
            displayName: "Prepare analysis on SonarCloud for PR"
            condition: eq(variables['Build.Reason'], 'PullRequest')
            inputs:
              SonarCloud: "SonarCloud"
              organization: "zingz0r-github"
              scannerMode: "MSBuild"
              projectKey: "zingz0r_CloudFlare.Client"
              projectName: "CloudFlare.Client"
              projectVersion: "$(Build.BuildNumber)"
              extraProperties: |
                sonar.pullrequest.key=$(System.PullRequest.pullRequestNumber)
                sonar.pullrequest.branch=$(System.PullRequest.SourceBranch)
                sonar.pullrequest.base=$(System.PullRequest.TargetBranch)
                sonar.exclusions=**/obj/**,**/*.dll
                sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/TestResults.trx
                sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/**/coverage.opencover.xml

          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: build
              projects: "**/*.csproj"
              arguments: "--configuration $(buildConfiguration)"

          - task: DotNetCoreCLI@2
            displayName: "Test"
            env:
              ApiKey: $(ApiKey)
              EmailAddress: $(EmailAddress)
            inputs:
              command: test
              projects: "**/*Test.csproj"
              arguments: '--logger "trx;logfilename=TestResults.trx" --no-build --configuration $(buildConfiguration) --collect "XPlat Code Coverage;Format=opencover,cobertura'
              publishTestResults: true

          - task: SonarCloudAnalyze@1
            displayName: "Analyze Code with SonarCloud"

          - task: SonarCloudPublish@1
            displayName: "Publish Code Analysis Results"

          - task: PublishCodeCoverageResults@1
            displayName: "Publish Code Coverage Report"
            inputs:
              codeCoverageTool: "Cobertura"
              summaryFileLocation: $(Build.SourcesDirectory)/coverage.cobertura.xml

          - task: DotNetCoreCLI@2
            displayName: "Pack Release"
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
            inputs:
              command: pack
              packagesToPack: "CloudFlare.Client/CloudFlare.Client.csproj"
              packDirectory: "$(Build.ArtifactStagingDirectory)/packages"
              arguments: "--no-build  --configuration $(buildConfiguration)"
              versioningScheme: "byEnvVar"
              versionEnvVar: Build.SourceBranchName
              verbosityPack: Diagnostic

          - task: CopyFiles@2
            displayName: Copy Files
            inputs:
              SourceFolder: "CloudFlare.Client/bin"
              Contents: "**"
              TargetFolder: "$(Build.ArtifactStagingDirectory)"

          - task: PublishBuildArtifacts@1
            displayName: Publish To Artifactory
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "drop"
              publishLocation: "Container"

          - task: NuGetCommand@2
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
            displayName: "Deploy Release to nuget.org"
            inputs:
              command: "push"
              packagesToPush: "$(Build.ArtifactStagingDirectory)/packages/*.nupkg"
              nuGetFeedType: "external"
              publishFeedCredentials: "nuget.org"
              verbosityPush: Detailed
